"""
Handlers for courier users.
This module contains handlers for courier-specific commands and functions.
"""
import logging
from utils.timezone import format_datetime_dushanbe, is_working_hours, get_working_hours_message
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from config import ROLE_COURIER, ADMIN_CHAT_IDS
from keyboards.courier_kb import get_delivery_confirmation_keyboard, get_courier_main_keyboard
from storage.database import (
    get_user_role, get_courier_orders, get_order_by_id, 
    mark_order_as_delivered
)

logger = logging.getLogger(__name__)

# Create router
router = Router()


class DeliveryCommentForm(StatesGroup):
    """States for delivery comment process"""
    waiting_for_comment = State()


async def courier_access_required(message: Message):
    """Check if user has courier role"""
    user_id = message.from_user.id
    role = await get_user_role(user_id)
    return role == ROLE_COURIER


@router.message(Command("mydeliveries"))
@router.message(F.text == "üöö –ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏")
async def cmd_my_deliveries(message: Message):
    """Handler for /mydeliveries command to view assigned deliveries"""
    if not await courier_access_required(message):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫—É—Ä—å–µ—Ä–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –∫—É—Ä—å–µ—Ä.")
        return
    
    user_id = message.from_user.id
    orders = await get_courier_orders(user_id)
    
    if not orders:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫.</b>\n\n"
            "–ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–∏—Ç –≤–∞–º –¥–æ—Å—Ç–∞–≤–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            reply_markup=await get_courier_main_keyboard(),
            parse_mode="HTML"
        )
        return
    
    delivered_orders = []
    assigned_orders = []
    
    for order in orders:
        if order['status'] == "delivered":
            delivered_orders.append(order)
        elif order['status'] == "assigned":
            assigned_orders.append(order)
    
    # First, show active assignments with confirmation buttons
    for order in assigned_orders:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã
        payment_amount = order.get('payment_amount', 0)
        payment_formatted = f"{payment_amount:.2f}" if payment_amount > 0 else "–ù–µ—Ç"
        
        response = (
            f"üöö <b>–ê–∫—Ç–∏–≤–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: –ó–∞–∫–∞–∑ #{order['id']}</b>\n\n"
            f"üè™ <b>–ú–∞–≥–∞–∑–∏–Ω:</b> {order['shop_name']}\n"
            f"üì± <b>–ö–ª–∏–µ–Ω—Ç:</b> {order['customer_phone']}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order['city']}, {order['delivery_address']}\n"
            f"üí∞ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> {payment_formatted} —Å–æ–º–æ–Ω–∏\n"
            f"üïí <b>–ù–∞–∑–Ω–∞—á–µ–Ω:</b> {order.get('assigned_at', '–ù/–î')}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</b>, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É."
        )
        
        await message.answer(
            response, 
            reply_markup=await get_delivery_confirmation_keyboard(order['id']),
            parse_mode="HTML"
        )
    
    # Then, show completed deliveries if any
    if delivered_orders:
        response = "‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n\n"
        for order in delivered_orders:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã
            payment_amount = order.get('payment_amount', 0)
            payment_formatted = f"{payment_amount:.2f}" if payment_amount > 0 else "–ù–µ—Ç"
            
            response += (
                f"üü¢ <b>–ó–∞–∫–∞–∑ #{order['id']}</b>\n"
                f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {order['shop_name']}\n"
                f"üì± –ö–ª–∏–µ–Ω—Ç: {order['customer_phone']}\n"
                f"üìç –ê–¥—Ä–µ—Å: {order['city']}, {order['delivery_address']}\n"
                f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_formatted} —Å–æ–º–æ–Ω–∏\n"
                f"üïí –î–æ—Å—Ç–∞–≤–ª–µ–Ω –≤: {order.get('delivered_at', '–ù/–î')}\n\n"
            )
        
        await message.answer(
            response, 
            reply_markup=await get_courier_main_keyboard(),
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("delivery:"))
async def delivery_confirmation_callback(callback_query: CallbackQuery, state: FSMContext):
    """Handle delivery confirmation button callbacks"""
    await callback_query.answer()
    
    # Extract order ID from callback data
    # Format: "delivery:confirm:123" or "delivery:comment:123"
    data_parts = callback_query.data.split(":")
    if len(data_parts) != 3:
        await callback_query.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞")
        return
    
    action = data_parts[1]
    order_id = int(data_parts[2])
    
    # Get order details
    order = await get_order_by_id(order_id)
    
    if not order:
        await callback_query.message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # Check if the courier is assigned to this order
    courier_id = callback_query.from_user.id
    if order.get('courier_id') != courier_id:
        await callback_query.message.answer("–í—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑")
        return
    
    if action == "confirm":
        # Show final confirmation
        confirmation_kb = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text=f"–î–∞, —è –¥–æ—Å—Ç–∞–≤–∏–ª –∑–∞–∫–∞–∑ #{order_id}"), KeyboardButton(text="–ù–µ—Ç, –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–∏–ª")]
        ], resize_keyboard=True)
        
        await callback_query.message.answer(
            f"‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞–∫–∞–∑ #{order_id}?</b>\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ <b>–î–∞</b> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ <b>–ù–µ—Ç</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=confirmation_kb,
            parse_mode="HTML"
        )
    
    elif action == "comment":
        # Ask for delivery comment
        await callback_query.message.answer(
            f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É #{order_id}</b>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö —ç—Ç–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏. "
            f"–≠—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –º–∞–≥–∞–∑–∏–Ω—É.",
            parse_mode="HTML"
        )
        
        # Set state to wait for comment
        await state.set_state(DeliveryCommentForm.waiting_for_comment)
        await state.update_data(order_id=order_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
@router.message(lambda message: message.text and (message.text.startswith("–î–∞, —è –¥–æ—Å—Ç–∞–≤–∏–ª –∑–∞–∫–∞–∑ #") or message.text == "–ù–µ—Ç, –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–∏–ª"))
async def process_final_confirmation(message: Message, state: FSMContext):
    """Process final delivery confirmation"""
    logger.debug(f"Received message text: '{message.text}'")
    
    if message.text.startswith("–î–∞, —è –¥–æ—Å—Ç–∞–≤–∏–ª –∑–∞–∫–∞–∑ #"):
        logger.debug(f"Message matches delivery confirmation pattern")
        try:
            # Extract order ID from the message
            parts = message.text.split("#")
            if len(parts) < 2:
                logger.error(f"Invalid format: no '#' character in message: {message.text}")
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞.",
                    reply_markup=await get_courier_main_keyboard()
                )
                return
                
            order_id_text = parts[1].strip()
            logger.debug(f"Extracted order ID text: '{order_id_text}'")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –∑–∞–∫–∞–∑–∞ –≤ —á–∏—Å–ª–æ
            try:
                order_id = int(order_id_text)
            except ValueError:
                logger.error(f"Cannot convert '{order_id_text}' to integer")
                await message.answer(
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞: '{order_id_text}'. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.",
                    reply_markup=await get_courier_main_keyboard()
                )
                return
            
            logger.info(f"Processing delivery confirmation for order #{order_id}")
            
            # Mark order as delivered
            current_time = format_datetime_dushanbe()
            logger.debug(f"Marking order #{order_id} as delivered at {current_time}")
            
            success = await mark_order_as_delivered(
                order_id=order_id,
                delivered_at=current_time
            )
            
            if not success:
                logger.error(f"Failed to mark order #{order_id} as delivered")
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=await get_courier_main_keyboard(),
                    parse_mode="HTML"
                )
                return
            
            await message.answer(
                f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π!</b>\n\n"
                f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {current_time}",
                reply_markup=await get_courier_main_keyboard(),
                parse_mode="HTML"
            )
            
            # Get order details to notify admin and shop
            order = await get_order_by_id(order_id)
            if not order:
                logger.error(f"Order #{order_id} not found after marking as delivered")
                return
            
            # Prepare notification message
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã
            payment_amount = order.get('payment_amount', 0)
            payment_formatted = f"{payment_amount:.2f}" if payment_amount > 0 else "–ù–µ—Ç"
            
            delivery_notification = (
                f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {order['shop_name']}\n"
                f"üì± –ö–ª–∏–µ–Ω—Ç: {order['customer_phone']}\n"
                f"üìç –ê–¥—Ä–µ—Å: {order['city']}, {order['delivery_address']}\n"
                f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_formatted} —Å–æ–º–æ–Ω–∏\n"
                f"üïí –î–æ—Å—Ç–∞–≤–ª–µ–Ω –≤: {current_time}\n"
                f"üöö –ö—É—Ä—å–µ—Ä: {order.get('courier_name', '–ù/–î')}"
            )
            
            # Notify admin
            bot = message.bot
            for admin_id in ADMIN_CHAT_IDS:
                try:
                    await bot.send_message(admin_id, delivery_notification, parse_mode="HTML")
                    logger.info(f"Notification sent to admin {admin_id}")
                except Exception as e:
                    logger.error(f"Failed to notify admin {admin_id}: {e}")
            
            # Notify shop
            shop_id = order.get('shop_id')
            if shop_id:
                try:
                    await bot.send_message(shop_id, delivery_notification, parse_mode="HTML")
                    logger.info(f"Notification sent to shop {shop_id}")
                except Exception as e:
                    logger.error(f"Failed to notify shop {shop_id}: {e}")
                    

            
        except Exception as e:
            logger.error(f"Unexpected error processing delivery confirmation: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=await get_courier_main_keyboard(),
                parse_mode="HTML"
            )
    
    elif message.text == "–ù–µ—Ç, –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–∏–ª":
        logger.debug("User declined delivery confirmation")
        await message.answer(
            "üîÑ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ–∑–∂–µ.",
            reply_markup=await get_courier_main_keyboard(),
            parse_mode="HTML"
        )
    
    # Clear state regardless of the outcome
    await state.clear()


@router.message(Command("help"))
@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def cmd_courier_help(message: Message):
    """Handler for /help command or Help button for courier users"""
    if not await courier_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫—É—Ä—å–µ—Ä–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –∫—É—Ä—å–µ—Ä.")
        return
    
    help_text = (
        "üöö <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∫—É—Ä—å–µ—Ä–∞</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ üöö <b>–ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫\n"
        "‚Ä¢ ‚ùì <b>–ü–æ–º–æ—â—å</b> - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "<b>–ü—Ä–æ—Ü–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
        "1. –ö–æ–≥–¥–∞ –≤–∞–º –Ω–∞–∑–Ω–∞—á–∞—Ç –∑–∞–∫–∞–∑, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
        "2. –î–æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞–∫–∞–∑ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.\n"
        "3. –ü–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</b>.\n"
        "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É, –Ω–∞–∂–∞–≤ <b>–î–∞, —è –¥–æ—Å—Ç–∞–≤–∏–ª –∑–∞–∫–∞–∑</b>.\n\n"
        "<b>–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?</b>\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –æ —Å–∏—Ç—É–∞—Ü–∏–∏.\n\n"
        "<b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b> 10:00 - 20:00\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    await message.answer(help_text, reply_markup=await get_courier_main_keyboard(), parse_mode="HTML")


@router.message(DeliveryCommentForm.waiting_for_comment)
async def process_delivery_comment(message: Message, state: FSMContext):
    """Process delivery comment"""
    data = await state.get_data()
    order_id = data.get('order_id')
    
    if not order_id:
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–∫–∞–∑–∞.")
        await state.clear()
        return
    
    comment = message.text
    
    # Get order details
    order = await get_order_by_id(order_id)
    
    if not order:
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞:</b> –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    logger.info(f"Processing comment for order #{order_id}: {comment[:50]}...")
    
    # Save comment (you would need to extend your database functions to handle comments)
    # For now, we'll just acknowledge the comment
    
    await message.answer(
        f"‚úÖ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É #{order_id} –∑–∞–ø–∏—Å–∞–Ω!</b>\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.",
        reply_markup=await get_delivery_confirmation_keyboard(order_id),
        parse_mode="HTML"
    )
    
    # Notify admin about the comment
    comment_notification = (
        f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É #{order_id}</b>\n\n"
        f"üöö <b>–ö—É—Ä—å–µ—Ä:</b> {message.from_user.full_name}\n"
        f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}\n\n"
        f"üì¶ <b>–ó–∞–∫–∞–∑:</b> {order.get('shop_name', '–ù/–î')} ‚Üí {order.get('city', '–ù/–î')}, {order.get('delivery_address', '–ù/–î')}"
    )
    
    # Send to admins
    bot = message.bot
    for admin_id in ADMIN_CHAT_IDS:
        try:
            await bot.send_message(admin_id, comment_notification, parse_mode="HTML")
            logger.info(f"Comment notification sent to admin {admin_id}")
        except Exception as e:
            logger.error(f"Failed to send comment to admin {admin_id}: {e}")
    
    # Notify shop about the comment
    shop_id = order.get('shop_id')
    if shop_id:
        try:
            await bot.send_message(shop_id, comment_notification, parse_mode="HTML")
            logger.info(f"Comment notification sent to shop {shop_id}")
        except Exception as e:
            logger.error(f"Failed to send comment to shop {shop_id}: {e}")
    
    await state.clear()


def register_handlers(dp: Router):
    """Register all courier handlers"""
    dp.include_router(router)
