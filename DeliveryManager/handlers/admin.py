"""
Handlers for admin users.
This module contains handlers for admin-specific commands and functions.
"""
import logging
import re
from utils.timezone import get_date_dushanbe, get_yesterday_date
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import ROLE_ADMIN, ADMIN_CHAT_IDS
from keyboards.admin_kb import (
    get_admin_main_keyboard, get_couriers_keyboard,
    get_courier_management_keyboard, get_shop_management_keyboard,
    get_couriers_list_keyboard, get_shops_list_keyboard
)
from storage.database import (
    get_user_role, get_pending_orders, get_order_by_id, 
    assign_order_to_courier, get_couriers, get_all_orders,
    get_delivered_orders_in_timeframe, get_all_shops, get_all_couriers,
    delete_user, check_user_has_orders
)

logger = logging.getLogger(__name__)

# Create a router for admin handlers
router = Router()


class AssignOrderForm(StatesGroup):
    """States for order assignment process"""
    waiting_for_order_id = State()
    waiting_for_courier = State()


class UserManagementForm(StatesGroup):
    """States for user management process"""
    waiting_for_courier_deletion = State()
    waiting_for_shop_deletion = State()
    confirm_deletion = State()


async def admin_access_required(message: Message):
    """Check if user has admin role"""
    user_id = message.from_user.id
    role = await get_user_role(user_id)
    return role == ROLE_ADMIN


@router.message(Command("orders"))
@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
async def cmd_view_orders(message: Message):
    """Handler for /orders command to view all pending orders"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    orders = await get_pending_orders()
    
    if not orders:
        await message.answer(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.",
            reply_markup=await get_admin_main_keyboard()
        )
        return
    
    response = "üìã <b>–ó–∞–∫–∞–∑—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏:</b>\n\n"
    for order in orders:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã
        payment_amount = order.get('payment_amount', 0)
        payment_formatted = f"{payment_amount:.2f}" if payment_amount > 0 else "–ù–µ—Ç"
        
        response += (
            f"–ó–∞–∫–∞–∑ <b>#{order['id']}</b>\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {order['shop_name']}\n"
            f"üì± –ö–ª–∏–µ–Ω—Ç: {order['customer_phone']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order['city']}, {order['delivery_address']}\n"
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_formatted} —Å–æ–º–æ–Ω–∏\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {order['status'].capitalize()}\n\n"
        )
    
    response += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìÆ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–∫–∞–∑' —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–∫–∞–∑ –∫—É—Ä—å–µ—Ä—É."
    await message.answer(response, reply_markup=await get_admin_main_keyboard())


@router.message(Command("assign"), StateFilter("*"))
@router.message(F.text == "üìÆ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–∫–∞–∑", StateFilter("*"))
async def cmd_assign_order(message: Message, state: FSMContext):
    """Handler for /assign command to assign an order to a courier"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    await state.clear()
    
    # Get pending orders
    orders = await get_pending_orders()
    
    if not orders:
        await message.answer(
            "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.",
            reply_markup=await get_admin_main_keyboard()
        )
        return
    
    # Display orders for selection
    response = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ –Ω–æ–º–µ—Ä (ID):\n\n"
    for order in orders:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã
        payment_amount = order.get('payment_amount', 0)
        payment_formatted = f"{payment_amount:.2f}" if payment_amount > 0 else "–ù–µ—Ç"
        
        response += (
            f"–ó–∞–∫–∞–∑ <b>#{order['id']}</b>\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {order['shop_name']}\n"
            f"üì± –ö–ª–∏–µ–Ω—Ç: {order['customer_phone']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order['city']}, {order['delivery_address']}\n"
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_formatted} —Å–æ–º–æ–Ω–∏\n\n"
        )
    
    await message.answer(response)
    await state.set_state(AssignOrderForm.waiting_for_order_id)


@router.message(AssignOrderForm.waiting_for_order_id)
async def process_order_id_selection(message: Message, state: FSMContext):
    """Process order ID selection for assignment"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel", "–æ—Ç–º–µ–Ω–∏—Ç—å"]:
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=await get_admin_main_keyboard()
        )
        await state.clear()
        return
    
    try:
        order_id = int(message.text)
        order = await get_order_by_id(order_id)
        
        if not order:
            await message.answer(
                "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
            )
            return
        
        if order['status'] != 'pending':
            await message.answer(
                f"–ó–∞–∫–∞–∑ #{order_id} —É–∂–µ {order['status']}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
            )
            return
        
        # Save order ID in state
        await state.update_data(order_id=order_id)
        
        # Get couriers for selection
        couriers = await get_couriers()
        
        if not couriers:
            await message.answer(
                "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∫—É—Ä—å–µ—Ä–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                reply_markup=await get_admin_main_keyboard()
            )
            await state.clear()
            return
        
        # Display order details and courier selection keyboard
        courier_kb = await get_couriers_keyboard(couriers)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã
        payment_amount = order.get('payment_amount', 0)
        payment_formatted = f"{payment_amount:.2f}" if payment_amount > 0 else "–ù–µ—Ç"
        
        await message.answer(
            f"<b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {order['shop_name']}\n"
            f"üì± –ö–ª–∏–µ–Ω—Ç: {order['customer_phone']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order['city']}, {order['delivery_address']}\n"
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_formatted} —Å–æ–º–æ–Ω–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—å–µ—Ä–∞:",
            reply_markup=courier_kb
        )
        
        await state.set_state(AssignOrderForm.waiting_for_courier)
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")


@router.message(AssignOrderForm.waiting_for_courier)
async def process_courier_selection(message: Message, state: FSMContext):
    """Process courier selection for order assignment"""
    # Check if the user wants to cancel
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=await get_admin_main_keyboard()
        )
        await state.clear()
        return
    
    courier_data = message.text.split(": ")
    
    if len(courier_data) != 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    courier_name = courier_data[0]
    courier_id = int(courier_data[1])
    
    # Get order ID from state
    data = await state.get_data()
    order_id = data.get('order_id')
    
    # Get order details
    order = await get_order_by_id(order_id)
    
    if not order:
        await message.answer(
            "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=await get_admin_main_keyboard()
        )
        await state.clear()
        return
    
    # Assign order to courier
    success = await assign_order_to_courier(order_id, courier_id, courier_name)
    
    if not success:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=await get_admin_main_keyboard()
        )
        await state.clear()
        return
    
    await message.answer(
        f"–ó–∞–∫–∞–∑ #{order_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∫—É—Ä—å–µ—Ä—É {courier_name}.",
        reply_markup=await get_admin_main_keyboard()
    )
    
    # Notify courier about the new assignment
    bot = message.bot
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    payment_amount = order.get('payment_amount', 0)
    payment_formatted = f"{payment_amount:.2f}" if payment_amount > 0 else "–ù–µ—Ç"
    
    courier_notification = (
        f"üì¶ <b>–ù–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ - –ó–∞–∫–∞–∑ #{order_id}</b>\n\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {order['customer_phone']}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {order['city']}\n"
        f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {order['shop_name']}\n"
        f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order['delivery_address']}\n"
        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_formatted} —Å–æ–º–æ–Ω–∏"
    )
    
    try:
        # Send notification to courier with delivery details and buttons
        from keyboards.courier_kb import get_delivery_confirmation_keyboard
        await bot.send_message(
            courier_id,
            courier_notification,
            reply_markup=await get_delivery_confirmation_keyboard(order_id),
            parse_mode="HTML"
        )
        logger.info(f"Telegram notification sent to courier {courier_id}")
    except Exception as e:
        logger.error(f"Failed to notify courier {courier_id}: {e}")
        await message.answer(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏.")
    
    await state.clear()


@router.message(Command("couriers"))
async def cmd_view_couriers(message: Message):
    """Handler for /couriers command to view all registered couriers"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    couriers = await get_couriers()
    
    if not couriers:
        await message.answer(
            "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤.",
            reply_markup=await get_admin_main_keyboard()
        )
        return
    
    response = "üìã <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä—ã:</b>\n\n"
    for courier in couriers:
        # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∫—É—Ä—å–µ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç: "–ò–º—è | –¢–µ–ª–µ—Ñ–æ–Ω")
        courier_info = courier['username'].split(" | ")
        courier_name = courier_info[0] if len(courier_info) > 0 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        courier_phone = courier_info[1] if len(courier_info) > 1 else "–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        
        response += f"‚Ä¢ <b>{courier_name}</b>\n  üì± –¢–µ–ª–µ—Ñ–æ–Ω: {courier_phone}\n  üÜî ID: {courier['id']}\n\n"
    
    await message.answer(response, reply_markup=await get_admin_main_keyboard(), parse_mode="HTML")


@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def cmd_user_management_redirect(message: Message):
    """Redirect to common handler for user management"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ common.py
    from handlers.common import cmd_user_management
    await cmd_user_management(message)

@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞–º–∏")
async def cmd_courier_management(message: Message):
    """Handler for courier management"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await get_courier_management_keyboard()
    )


@router.message(F.text == "üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏")
async def cmd_shop_management(message: Message):
    """Handler for shop management"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await get_shop_management_keyboard()
    )


@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_back_to_main_menu(message: Message, state: FSMContext):
    """Handler to return to main menu"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    await state.clear()
    await message.answer(
        "–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=await get_admin_main_keyboard()
    )


@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤")
async def cmd_list_couriers(message: Message):
    """Handler to list all couriers"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    couriers = await get_all_couriers()
    
    if not couriers:
        await message.answer(
            "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤.",
            reply_markup=await get_courier_management_keyboard()
        )
        return
    
    response = "üìã <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä—ã:</b>\n\n"
    for courier in couriers:
        # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∫—É—Ä—å–µ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç: "–ò–º—è | –¢–µ–ª–µ—Ñ–æ–Ω")
        courier_info = courier['username'].split(" | ")
        courier_name = courier_info[0] if len(courier_info) > 0 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        courier_phone = courier_info[1] if len(courier_info) > 1 else "–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        
        response += f"‚Ä¢ <b>{courier_name}</b>\n  üì± –¢–µ–ª–µ—Ñ–æ–Ω: {courier_phone}\n  üÜî ID: {courier['id']}\n\n"
    
    await message.answer(response, reply_markup=await get_courier_management_keyboard(), parse_mode="HTML")


@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤")
async def cmd_list_shops(message: Message):
    """Handler to list all shops"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    shops = await get_all_shops()
    
    if not shops:
        await message.answer(
            "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤.",
            reply_markup=await get_shop_management_keyboard()
        )
        return
    
    response = "üìã <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã:</b>\n\n"
    for shop in shops:
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –º–∞–≥–∞–∑–∏–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç: "–ù–∞–∑–≤–∞–Ω–∏–µ | –¢–µ–ª–µ—Ñ–æ–Ω")
        shop_info = shop['username'].split(" | ")
        shop_name = shop_info[0] if len(shop_info) > 0 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        shop_phone = shop_info[1] if len(shop_info) > 1 else "–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        
        response += f"‚Ä¢ <b>{shop_name}</b>\n  üì± –¢–µ–ª–µ—Ñ–æ–Ω: {shop_phone}\n  üÜî ID: {shop['id']}\n\n"
    
    await message.answer(response, reply_markup=await get_shop_management_keyboard(), parse_mode="HTML")


@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞", StateFilter(None))
async def cmd_delete_courier_start(message: Message, state: FSMContext):
    """Handler to start courier deletion process"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    couriers = await get_all_couriers()
    
    if not couriers:
        await message.answer(
            "–ù–µ—Ç –∫—É—Ä—å–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=await get_courier_management_keyboard()
        )
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=await get_couriers_list_keyboard(couriers)
    )
    
    await state.set_state(UserManagementForm.waiting_for_courier_deletion)


@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω", StateFilter(None))
async def cmd_delete_shop_start(message: Message, state: FSMContext):
    """Handler to start shop deletion process"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    shops = await get_all_shops()
    
    if not shops:
        await message.answer(
            "–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=await get_shop_management_keyboard()
        )
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=await get_shops_list_keyboard(shops)
    )
    
    await state.set_state(UserManagementForm.waiting_for_shop_deletion)


@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", StateFilter(UserManagementForm.waiting_for_courier_deletion, UserManagementForm.waiting_for_shop_deletion))
async def cmd_back_to_user_management(message: Message, state: FSMContext):
    """Handler to return to user management menu"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    current_state = await state.get_state()
    
    await state.clear()
    
    if current_state == UserManagementForm.waiting_for_courier_deletion.state:
        await message.answer(
            "–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞–º–∏.",
            reply_markup=await get_courier_management_keyboard()
        )
    else:
        await message.answer(
            "–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞–º–∏.",
            reply_markup=await get_shop_management_keyboard()
        )


@router.message(UserManagementForm.waiting_for_courier_deletion)
async def process_courier_deletion(message: Message, state: FSMContext):
    """Handler for courier deletion"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        await state.clear()
        return
    
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await cmd_back_to_user_management(message, state)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "‚ùå –ò–º—è (ID: 123456)"
    match = re.search(r'ID: (\d+)', message.text)
    if not match:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.",
            reply_markup=await get_couriers_list_keyboard(await get_all_couriers())
        )
        return
    
    user_id = int(match.group(1))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    has_orders = await check_user_has_orders(user_id)
    if has_orders:
        await message.answer(
            "–≠—Ç–æ—Ç –∫—É—Ä—å–µ—Ä –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã. –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –µ–≥–æ –∑–∞–∫–∞–∑—ã.",
            reply_markup=await get_courier_management_keyboard()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(user_id=user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_couriers = await get_all_couriers()
    courier_name = next((c["username"] for c in all_couriers if c["id"] == user_id), "Unknown")
    
    await message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ {courier_name} (ID: {user_id})?\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–ù–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    
    await state.set_state(UserManagementForm.confirm_deletion)


@router.message(UserManagementForm.waiting_for_shop_deletion)
async def process_shop_deletion(message: Message, state: FSMContext):
    """Handler for shop deletion"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        await state.clear()
        return
    
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await cmd_back_to_user_management(message, state)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "‚ùå –ò–º—è (ID: 123456)"
    match = re.search(r'ID: (\d+)', message.text)
    if not match:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.",
            reply_markup=await get_shops_list_keyboard(await get_all_shops())
        )
        return
    
    user_id = int(match.group(1))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    has_orders = await check_user_has_orders(user_id)
    if has_orders:
        await message.answer(
            "–£ —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã. –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –µ–≥–æ –∑–∞–∫–∞–∑—ã.",
            reply_markup=await get_shop_management_keyboard()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(user_id=user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_shops = await get_all_shops()
    shop_name = next((s["username"] for s in all_shops if s["id"] == user_id), "Unknown")
    
    await message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω {shop_name} (ID: {user_id})?\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–ù–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    
    await state.set_state(UserManagementForm.confirm_deletion)


@router.message(UserManagementForm.confirm_deletion)
async def process_deletion_confirmation(message: Message, state: FSMContext):
    """Handler for deletion confirmation"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        await state.clear()
        return
    
    confirmation = message.text.lower()
    
    if confirmation not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–ù–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    data = await state.get_data()
    user_id = data.get("user_id")
    
    if confirmation == "–Ω–µ—Ç":
        await message.answer(
            "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=await get_admin_main_keyboard()
        )
        await state.clear()
        return
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await delete_user(user_id)
    
    if not success:
        await message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=await get_admin_main_keyboard()
        )
    else:
        await message.answer(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=await get_admin_main_keyboard()
        )
    
    await state.clear()


@router.message(Command("help"))
@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def cmd_admin_help(message: Message):
    """Handler for /help command or Help button for admin users"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    help_text = (
        "üõ† <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
        "‚Ä¢ üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n"
        "‚Ä¢ üìÆ <b>–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–∫–∞–∑</b> - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞–º\n"
        "‚Ä¢ üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º, –∫—É—Ä—å–µ—Ä–∞–º–∏ –∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏\n"
        "‚Ä¢ üìä <b>–û—Ç—á–µ—Ç</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º\n"
        "‚Ä¢ ‚ùì <b>–ü–æ–º–æ—â—å</b> - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞:</b>\n"
        "/whitelist_add ID - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫\n"
        "/whitelist_list - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ\n"
        "/whitelist_remove ID - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞\n"
        "/export_orders - —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ Excel\n\n"
        "‚è∞ <b>–†–∞–±–æ—á–∏–µ —á–∞—Å—ã:</b> 10:00 - 20:00"
    )
    
    await message.answer(help_text, reply_markup=await get_admin_main_keyboard())


@router.message(Command("report"))
@router.message(F.text == "üìä –û—Ç—á–µ—Ç")
async def cmd_report(message: Message):
    """Handler for /report command to generate delivery reports"""
    if not await admin_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    # Get today's date and yesterday's date
    today = get_date_dushanbe()
    yesterday = get_yesterday_date()
    
    # Get all orders
    all_orders = await get_all_orders()
    total_orders = len(all_orders)
    
    # Count orders by status
    pending_count = 0
    assigned_count = 0
    delivered_count = 0
    
    for order in all_orders:
        status = order.get('status', 'pending')
        if status == 'pending':
            pending_count += 1
        elif status == 'assigned':
            assigned_count += 1
        elif status == 'delivered':
            delivered_count += 1
    
    # Get delivered orders for today and yesterday
    today_delivered = await get_delivered_orders_in_timeframe(today)
    yesterday_delivered = await get_delivered_orders_in_timeframe(yesterday)
    
    # Prepare report
    report = (
        "üìä –û—Ç—á–µ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–∞—Ö\n\n"
        f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"–í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_count}\n"
        f"–ù–∞–∑–Ω–∞—á–µ–Ω–æ: {assigned_count}\n"
        f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {delivered_count}\n\n"
        f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è ({today}): {len(today_delivered)}\n"
        f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤—á–µ—Ä–∞ ({yesterday}): {len(yesterday_delivered)}\n\n"
    )
    
    # –£–±—Ä–∞–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ –ø—Ä–æ—Å—å–±–µ –∫–ª–∏–µ–Ω—Ç–∞
    
    await message.answer(report, reply_markup=await get_admin_main_keyboard())


def register_handlers(dp: Router):
    """Register all admin handlers"""
    dp.include_router(router)
