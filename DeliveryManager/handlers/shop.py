"""
Handlers for shop users.
This module contains handlers for shop-specific commands and functions.
"""
import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from config import ROLE_SHOP, ADMIN_CHAT_IDS
from keyboards.shop_kb import get_shop_main_keyboard
from storage.database import get_user_role, create_order, get_shop_orders, _read_database
from utils.timezone import is_working_hours, get_working_hours_message

logger = logging.getLogger(__name__)

# Create router
router = Router()


class OrderForm(StatesGroup):
    """States for order creation process"""
    customer_phone = State()
    city = State()
    delivery_address = State()
    payment_amount = State()
    confirmation = State()


async def shop_access_required(message: Message):
    """Check if user has shop role"""
    user_id = message.from_user.id
    role = await get_user_role(user_id)
    return role == ROLE_SHOP


@router.message(Command("neworder"), StateFilter("*"))
@router.message(F.text == "üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", StateFilter("*"))
async def cmd_new_order(message: Message, state: FSMContext):
    """Handler for /neworder command to create a new delivery"""
    if not await shop_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–∞–≥–∞–∑–∏–Ω–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –º–∞–≥–∞–∑–∏–Ω.")
        return
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–µ—Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –ø–æ–∑–≤–æ–ª—è–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã
    if not is_working_hours():
        working_hours_msg = get_working_hours_message()
        await message.answer(
            f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (<b>10:00 - 20:00</b>).\n"
            f"{working_hours_msg}\n\n"
            f"–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
            parse_mode="HTML"
        )
    
    await state.clear()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True)
    
    await message.answer(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —à–∞–≥–∞–º.\n"
        "–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É <b>‚ùå –û—Ç–º–µ–Ω–∞</b>, —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.\n\n"
        "–®–∞–≥ 1Ô∏è‚É£: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +992XXXXXXXXX:",
        reply_markup=cancel_kb
    )
    await state.set_state(OrderForm.customer_phone)


@router.message(OrderForm.customer_phone)
async def process_customer_phone(message: Message, state: FSMContext):
    """Process customer phone number input"""
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤ –±—É–¥—É—â–µ–º)
    phone = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not (phone.startswith('+') and len(phone) >= 8):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +992XXXXXXXXX"
        )
        return
    
    await state.update_data(customer_phone=phone)
    
    cancel_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True)
    
    await message.answer(
        "–®–∞–≥ 2Ô∏è‚É£: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ <b>–≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏</b>:",
        reply_markup=cancel_kb
    )
    await state.set_state(OrderForm.city)


@router.message(OrderForm.city)
async def process_city(message: Message, state: FSMContext):
    """Process city input"""
    city = message.text.strip()
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞
    if len(city) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        return
    
    await state.update_data(city=city)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω)
    user_id = message.from_user.id
    role = await get_user_role(user_id)
    
    if role != ROLE_SHOP:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–∞–≥–∞–∑–∏–Ω–∞.")
        await state.clear()
        return
    
    db = await _read_database()
    shop_info = None
    
    for user in db["users"]:
        if user["id"] == user_id and user["role"] == ROLE_SHOP:
            shop_info = user["username"]
            break
    
    if not shop_info:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    
    # –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–æ–ª–µ username
    # –§–æ—Ä–º–∞—Ç: "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ | –¢–µ–ª–µ—Ñ–æ–Ω"
    shop_name = shop_info.split(" | ")[0]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    await state.update_data(shop_name=shop_name)
    
    cancel_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True)
    
    await message.answer(
        f"üìç <b>–®–∞–≥ 3Ô∏è‚É£:</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>: \n\n"
        f"‚ÑπÔ∏è <i>–ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ –º–∞–≥–∞–∑–∏–Ω–∞:</i> <b>{shop_name}</b>",
        reply_markup=cancel_kb,
        parse_mode="HTML"
    )
    await state.set_state(OrderForm.delivery_address)


@router.message(OrderForm.delivery_address)
async def process_delivery_address(message: Message, state: FSMContext):
    """Process delivery address input"""
    await state.update_data(delivery_address=message.text)
    
    cancel_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True)
    
    await message.answer(
        "–®–∞–≥ 4Ô∏è‚É£: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ <b>—Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ</b> (–≤ —Å–æ–º–æ–Ω–∏), –∫–æ—Ç–æ—Ä—É—é –∫—É—Ä—å–µ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n\n"
        "üîπ –ù–∞–ø—Ä–∏–º–µ—Ä: 150 –∏–ª–∏ 150.50\n"
        "üîπ –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø–ª–∞—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ 0",
        reply_markup=cancel_kb
    )
    await state.set_state(OrderForm.payment_amount)


@router.message(OrderForm.payment_amount)
async def process_payment_amount(message: Message, state: FSMContext):
    """Process payment amount input"""
    payment_text = message.text.strip().replace(',', '.')
    
    try:
        payment_amount = float(payment_text)
        if payment_amount < 0:
            raise ValueError("Payment amount cannot be negative")
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 0).\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 150 –∏–ª–∏ 150.50"
        )
        return
    
    await state.update_data(payment_amount=payment_amount)
    
    # Get all data to prepare confirmation message
    data = await state.get_data()
    
    # Format payment amount with 2 decimal places
    payment_formatted = f"{data['payment_amount']:.2f}" if data['payment_amount'] > 0 else "–ù–µ—Ç"
    
    # Prepare order confirmation message
    confirmation_msg = (
        "üìã <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {data['customer_phone']}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {data['city']}\n"
        f"üè™ –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: {data['shop_name']}\n"
        f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_address']}\n"
        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_formatted} —Å–æ–º–æ–Ω–∏"
    )
    
    # Create confirmation keyboard
    confirm_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
    ], resize_keyboard=True)
    
    await message.answer(confirmation_msg, reply_markup=confirm_kb)
    await state.set_state(OrderForm.confirmation)


@router.message(OrderForm.confirmation)
async def process_order_confirmation(message: Message, state: FSMContext):
    """Process order confirmation"""
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å" or message.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=await get_shop_main_keyboard()
        )
        return
    
    if message.text.lower() != "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" and message.text.lower() != "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await message.answer(
            "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:\n"
            "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b> - –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞\n"
            "‚ùå <b>–û—Ç–º–µ–Ω–∏—Ç—å</b> - –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"
        )
        return
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–µ—Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –ø–æ–∑–≤–æ–ª—è–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã
    if not is_working_hours():
        working_hours_msg = get_working_hours_message()
        await message.answer(
            f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (<b>10:00 - 20:00</b>).\n"
            f"{working_hours_msg}\n\n"
            f"–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
            parse_mode="HTML"
        )
    
    # Get order data from state
    data = await state.get_data()
    user_id = message.from_user.id
    
    # Create new order in the database
    order_id = await create_order(
        shop_id=user_id,
        customer_phone=data['customer_phone'],
        city=data['city'],
        shop_name=data['shop_name'],
        delivery_address=data['delivery_address'],
        payment_amount=data.get('payment_amount', 0)
    )
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –∫—É—Ä—å–µ—Ä—É.",
        reply_markup=await get_shop_main_keyboard()
    )
    
    # Notify admins about the new order
    payment_amount = data.get('payment_amount', 0)
    payment_formatted = f"{payment_amount:.2f}" if payment_amount > 0 else "–ù–µ—Ç"
    
    order_notification = (
        f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n\n"
        f"üè™ –û—Ç –º–∞–≥–∞–∑–∏–Ω–∞: {data['shop_name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {data['customer_phone']}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {data['city']}\n"
        f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_address']}\n"
        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_formatted} —Å–æ–º–æ–Ω–∏"
    )
    
    bot = message.bot
    for admin_id in ADMIN_CHAT_IDS:
        try:
            await bot.send_message(admin_id, order_notification)
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {e}")


@router.message(Command("myorders"))
@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def cmd_my_orders(message: Message):
    """Handler for /myorders command to view shop's orders"""
    if not await shop_access_required(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–∞–≥–∞–∑–∏–Ω–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –º–∞–≥–∞–∑–∏–Ω.")
        return
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–µ—Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –ø–æ–∑–≤–æ–ª—è–µ–º –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã
    if not is_working_hours():
        working_hours_msg = get_working_hours_message()
        await message.answer(
            f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (<b>10:00 - 20:00</b>).\n"
            f"{working_hours_msg}\n\n"
            f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
            parse_mode="HTML"
        )
    
    user_id = message.from_user.id
    orders = await get_shop_orders(user_id)
    
    if not orders:
        await message.answer(
            "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É.",
            reply_markup=await get_shop_main_keyboard()
        )
        return
    
    # Display all orders for the shop
    response = "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    for order in orders:
        status = order.get('status', 'pending')
        status_text = {
            'pending': '–û–∂–∏–¥–∞–µ—Ç',
            'assigned': '–ù–∞–∑–Ω–∞—á–µ–Ω',
            'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'
        }.get(status, status)
        
        status_emoji = "üü¢" if status == "delivered" else "üü°" if status == "assigned" else "üî¥"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã
        payment_amount = order.get('payment_amount', 0)
        payment_formatted = f"{payment_amount:.2f}" if payment_amount > 0 else "–ù–µ—Ç"
        
        response += (
            f"üì¶ <b>–ó–∞–∫–∞–∑ #{order['id']}</b> - {status_emoji} {status_text}\n"
            f"üì± –ö–ª–∏–µ–Ω—Ç: {order['customer_phone']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order['city']}, {order['delivery_address']}\n"
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_formatted} —Å–æ–º–æ–Ω–∏\n"
        )
        
        if status == "delivered" and "delivered_at" in order:
            response += f"üïí –î–æ—Å—Ç–∞–≤–ª–µ–Ω –≤: {order['delivered_at']}\n"
        
        if status == "assigned" and "courier_name" in order:
            response += f"üöö –ö—É—Ä—å–µ—Ä: {order['courier_name']}\n"
            
        response += "\n"
    
    await message.answer(response, reply_markup=await get_shop_main_keyboard())


def register_handlers(dp: Router):
    """Register all shop handlers"""
    dp.include_router(router)