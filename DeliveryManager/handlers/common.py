"""
Common handlers for all users regardless of role.
This module contains handlers for commands available to all users.
"""
import logging
from aiogram import Router, F, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import (
    ROLE_ADMIN, ROLE_SHOP, ROLE_COURIER, ADMIN_CHAT_IDS,
    USE_WHITELIST, WHITELISTED_USERS, add_user_to_whitelist
)
from storage.database import (
    get_user_role, register_user, 
    get_authorized_users, add_authorized_user, init_whitelist
)
from utils.timezone import (
    get_datetime_dushanbe, format_datetime_dushanbe, is_working_hours, get_working_hours_message
)

logger = logging.getLogger(__name__)

# Create a router for common handlers
router = Router()


class AccessVerification(StatesGroup):
    """States for access verification process"""
    waiting_for_access_code = State()


class RoleRegistration(StatesGroup):
    """States for role registration process"""
    waiting_for_role = State()
    waiting_for_courier_name = State()
    waiting_for_courier_phone = State()
    waiting_for_shop_name = State()
    waiting_for_shop_phone = State()


# –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
authorized_users = set(ADMIN_CHAT_IDS)  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤—Å–µ–≥–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã


async def check_user_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É"""
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø
    if user_id in ADMIN_CHAT_IDS:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –±–µ–ª–æ–º—É —Å–ø–∏—Å–∫—É, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if USE_WHITELIST:
        authorized_users_list = await get_authorized_users()
        return user_id in WHITELISTED_USERS or user_id in authorized_users_list
    
    # –ï—Å–ª–∏ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø
    return True


@router.message(CommandStart(), StateFilter("*"))
async def cmd_start(message: Message, state: FSMContext):
    """Handler for /start command"""
    await state.clear()
    user_id = message.from_user.id
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
    if not is_working_hours():
        # –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        logger.info(f"User {user_id} using bot outside of working hours")
    
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –±–µ–ª–æ–º—É —Å–ø–∏—Å–∫—É
    has_access = await check_user_access(user_id)
    
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –Ω–µ–º
    if USE_WHITELIST and not has_access:
        await message.answer(
            "‚õî <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –ø–æ—Å–∫–æ–ª—å–∫—É –≤–∞—à ID –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
            parse_mode="HTML"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø–æ–ø—ã—Ç–∫–µ –¥–æ—Å—Ç—É–ø–∞
        bot = message.bot
        user_username = message.from_user.username or "–Ω–µ—Ç"
        user_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        for admin_id in ADMIN_CHAT_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"‚ö†Ô∏è <b>–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                    f"üë§ <b>–ò–º—è:</b> {user_name}\n"
                    f"üÜî <b>ID:</b> {user_id}\n"
                    f"üìù <b>Username:</b> @{user_username}\n\n"
                    f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                    f"<code>/whitelist_add {user_id}</code>",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id} about unauthorized access: {e}")
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ä–æ–ª—å
    role = await get_user_role(user_id)
    
    if role:
        await message.answer(f"‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {role.capitalize()}.")
        
        if role == ROLE_ADMIN:
            kb = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"), KeyboardButton(text="üìÆ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–∫–∞–∑")],
                [KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"), KeyboardButton(text="üìä –û—Ç—á–µ—Ç")],
                [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
            ], resize_keyboard=True)
            await message.answer("üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
            
        elif role == ROLE_SHOP:
            kb = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑"), KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
                [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
            ], resize_keyboard=True)
            await message.answer("üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
            
        elif role == ROLE_COURIER:
            kb = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="üöö –ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏")],
                [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
            ], resize_keyboard=True)
            await message.answer("üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    else:
        register_kb = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üîê –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]
        ], resize_keyboard=True)
        
        await message.answer(
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TUKTUK - –ö–£–†–¨–ï–†–°–ö–ê–Ø –°–õ–£–ñ–ë–ê | –î–û–°–¢–ê–í–ö–ê! üåü\n\n"
            "üõµ –°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤\n"
            "üöÄ –ë—ã—Å—Ç—Ä–æ, –ª–µ–≥–∫–æ, –Ω–∞–¥—ë–∂–Ω–æ –∏ —É–¥–æ–±–Ω–æ\n"
            "üïó –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –æ—Ç 10:00 –¥–æ 20:00\n\n"
            "üíº –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –º–µ–∂–¥—É –º–∞–≥–∞–∑–∏–Ω–∞–º–∏, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –∫—É—Ä—å–µ—Ä–∞–º–∏.\n\n"
            "üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\" —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤–∞—à—É —Ä–æ–ª—å.",
            reply_markup=register_kb
        )


@router.message(Command("help"))
@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    """Handler for /help command or Help button"""
    user_id = message.from_user.id
    role = await get_user_role(user_id)
    
    if not role:
        await message.answer(
            "‚ÑπÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–º–æ—â–∏ TUKTUK!</b>\n\n"
            "üîê –°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üîê –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\".\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:</b>\n"
            "üõí <b>–ú–∞–≥–∞–∑–∏–Ω</b>: –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É\n"
            "‚öôÔ∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>: –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–∫–∞–∑–∞–º–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞–π—Ç–µ –∫—É—Ä—å–µ—Ä–æ–≤\n"
            "üöö <b>–ö—É—Ä—å–µ—Ä</b>: –î–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∑–∞–∫–∞–∑—ã –∏ –æ—Ç–º–µ—á–∞–π—Ç–µ –∏—Ö –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ\n\n"
            "‚è∞ <b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> 10:00 - 20:00"
        )
        return
    
    if role == ROLE_SHOP:
        help_text = (
            "üì± <b>TUKTUK - –°–õ–£–ñ–ë–ê –î–û–°–¢–ê–í–ö–ò</b>\n\n"
            "üõí <b>–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞:</b>\n\n"
            "üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É\n"
            "üìã <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã\n"
            "‚ùå <b>–û—Ç–º–µ–Ω–∞</b> - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
            "‚è∞ <b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> 10:00 - 20:00\n"
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–º–æ—â–∏"
        )
    elif role == ROLE_ADMIN:
        help_text = (
            "üì± <b>TUKTUK - –°–õ–£–ñ–ë–ê –î–û–°–¢–ê–í–ö–ò</b>\n\n"
            "‚öôÔ∏è <b>–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
            "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã\n"
            "üìÆ <b>–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–∫–∞–∑</b> - –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–∫–∞–∑ –∫—É—Ä—å–µ—Ä—É\n"
            "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b> - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º\n"
            "üìä <b>–û—Ç—á–µ—Ç</b> - –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–∞—Ö\n"
            "‚ùå <b>–û—Ç–º–µ–Ω–∞</b> - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞:</b>\n"
            "/whitelist_add [ID] - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫\n"
            "/whitelist_list - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ\n"
            "/whitelist_remove [ID] - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞\n\n"
            "<b>–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel:</b>\n"
            "/export_orders - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ Excel —Ñ–∞–π–ª\n\n"
            "‚è∞ <b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> 10:00 - 20:00"
        )
    elif role == ROLE_COURIER:
        help_text = (
            "üì± <b>TUKTUK - –°–õ–£–ñ–ë–ê –î–û–°–¢–ê–í–ö–ò</b>\n\n"
            "üöö <b>–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞:</b>\n\n"
            "üöö <b>–ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –≤–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏\n"
            "‚ùå <b>–û—Ç–º–µ–Ω–∞</b> - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
            "üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤–∞–º –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞.\n\n"
            "‚è∞ <b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> 10:00 - 20:00\n"
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–º–æ—â–∏"
        )
    else:
        help_text = "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    
    await message.answer(help_text)


@router.message(Command("register"))
@router.message(Command("resetrole"))
@router.message(F.text == "üîê –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
@router.message(F.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å")
async def cmd_register(message: Message, state: FSMContext):
    """Handler for register command or button to set user role"""
    await state.clear()
    user_id = message.from_user.id
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–µ—Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –ø–æ–∑–≤–æ–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    if not is_working_hours():
        working_hours_msg = get_working_hours_message()
        await message.answer(
            f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (<b>10:00 - 20:00</b>).\n"
            f"{working_hours_msg}\n\n"
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
            parse_mode="HTML"
        )
    
    # Check if user already has a role
    role = await get_user_role(user_id)
    is_reset = message.text == "/resetrole" or message.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å"
    
    if role and not is_reset:
        reset_kb = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å")]
        ], resize_keyboard=True)
        await message.answer(
            f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {role.capitalize()}.\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /resetrole –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=reset_kb
        )
        return
    
    # For admin role, check if user ID is in the allowed admin list
    if user_id in ADMIN_CHAT_IDS:
        roles_kb = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"), KeyboardButton(text="üöö –ö—É—Ä—å–µ—Ä")]
        ], resize_keyboard=True)
    else:
        roles_kb = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton(text="üöö –ö—É—Ä—å–µ—Ä")]
        ], resize_keyboard=True)
    
    await message.answer("üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=roles_kb)
    await state.set_state(RoleRegistration.waiting_for_role)


@router.message(RoleRegistration.waiting_for_role)
async def process_role_selection(message: Message, state: FSMContext):
    """Process the selected role"""
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    
    # Extract role from button text
    text = message.text.lower()
    if "–º–∞–≥–∞–∑–∏–Ω" in text or "shop" in text:
        selected_role = ROLE_SHOP
    elif "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" in text or "admin" in text:
        selected_role = ROLE_ADMIN
    elif "–∫—É—Ä—å–µ—Ä" in text or "courier" in text:
        selected_role = ROLE_COURIER
    else:
        selected_role = None
    
    if selected_role not in [ROLE_ADMIN, ROLE_SHOP, ROLE_COURIER]:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.",
            parse_mode="HTML"
        )
        return
    
    # Only allow admin registration for users in the admin list
    if selected_role == ROLE_ADMIN and user_id not in ADMIN_CHAT_IDS:
        await message.answer(
            "‚õî <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞:</b> –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ä–æ–ª—å.",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selected_role=selected_role)
    
    cancel_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True)
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å –∫—É—Ä—å–µ—Ä–∞, –∑–∞–ø—Ä–æ—Å–∏–º –µ–≥–æ –∏–º—è
    if selected_role == ROLE_COURIER:
        await message.answer(
            "üßë‚Äçüíº <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–ø–æ–ª–Ω–æ–µ –∏–º—è</b>.\n\n"
            "‚ö†Ô∏è –≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=cancel_kb,
            parse_mode="HTML"
        )
        await state.set_state(RoleRegistration.waiting_for_courier_name)
        return
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    if selected_role == ROLE_SHOP:
        await message.answer(
            "üè™ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞</b>.\n\n"
            "‚ö†Ô∏è –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∑–∞–∫–∞–∑–∞—Ö –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É.",
            reply_markup=cancel_kb,
            parse_mode="HTML"
        )
        await state.set_state(RoleRegistration.waiting_for_shop_name)
        return
    
    # –î–ª—è —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞ —Å—Ä–∞–∑—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await register_user(
        user_id=user_id,
        username=user_name,
        role=selected_role
    )
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ ‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"), KeyboardButton(text="üìÆ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"), KeyboardButton(text="üìä –û—Ç—á–µ—Ç")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)
    
    await message.answer(
        "üìã –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\"</b>", 
        reply_markup=admin_kb,
        parse_mode="HTML"
    )


@router.message(RoleRegistration.waiting_for_shop_name)
async def process_shop_name(message: Message, state: FSMContext):
    """Process shop name input"""
    shop_name = message.text.strip()
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
    if len(shop_name) < 2:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞.",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    await state.update_data(shop_name=shop_name)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    cancel_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True)
    
    await message.answer(
        "üì± <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.\n\n"
        "‚ö†Ô∏è –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–≤—è–∑–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏.",
        reply_markup=cancel_kb,
        parse_mode="HTML"
    )
    await state.set_state(RoleRegistration.waiting_for_shop_phone)


@router.message(RoleRegistration.waiting_for_shop_phone)
async def process_shop_phone(message: Message, state: FSMContext):
    """Process shop phone input"""
    shop_phone = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ 
    if len(shop_phone) < 5:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_role = data.get('selected_role')
    shop_name = data.get('shop_name')
    
    if not selected_role or selected_role != ROLE_SHOP or not shop_name:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    user_id = message.from_user.id
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –º–∞–≥–∞–∑–∏–Ω–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    full_shop_info = f"{shop_name} | {shop_phone}"
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞–≥–∞–∑–∏–Ω
    await register_user(
        user_id=user_id,
        username=full_shop_info,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
        role=selected_role
    )
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ üõí –ú–∞–≥–∞–∑–∏–Ω!</b>\n\n"
        f"üè™ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:</b> {shop_name}\n"
        f"üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {shop_phone}",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    shop_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑"), KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)
    
    await message.answer(
        "üìù –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\"</b>", 
        reply_markup=shop_kb,
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
    bot = message.bot
    for admin_id in ADMIN_CHAT_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"üè™ <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω!</b>\n\n"
                f"üõí <b>–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:</b> {shop_name}\n"
                f"üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {shop_phone}\n"
                f"üÜî <b>ID:</b> {user_id}",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id} about new shop: {e}")


@router.message(RoleRegistration.waiting_for_courier_name)
async def process_courier_name(message: Message, state: FSMContext):
    """Process courier name input"""
    courier_name = message.text.strip()
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –∫—É—Ä—å–µ—Ä–∞
    if len(courier_name) < 2:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫—É—Ä—å–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(courier_name=courier_name)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫—É—Ä—å–µ—Ä–∞
    cancel_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True)
    
    await message.answer(
        "üì± <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>.\n\n"
        "‚ö†Ô∏è –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.",
        reply_markup=cancel_kb,
        parse_mode="HTML"
    )
    await state.set_state(RoleRegistration.waiting_for_courier_phone)


@router.message(RoleRegistration.waiting_for_courier_phone)
async def process_courier_phone(message: Message, state: FSMContext):
    """Process courier phone input"""
    courier_phone = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ 
    if len(courier_phone) < 5:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_role = data.get('selected_role')
    courier_name = data.get('courier_name')
    
    if not selected_role or selected_role != ROLE_COURIER or not courier_name:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    user_id = message.from_user.id
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∫—É—Ä—å–µ—Ä–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    full_courier_info = f"{courier_name} | {courier_phone}"
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫—É—Ä—å–µ—Ä–∞
    await register_user(
        user_id=user_id,
        username=full_courier_info,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
        role=selected_role
    )
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ üöö –ö—É—Ä—å–µ—Ä!</b>\n\n"
        f"üë§ <b>–í–∞—à–µ –∏–º—è –≤ —Å–∏—Å—Ç–µ–º–µ:</b> {courier_name}\n"
        f"üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {courier_phone}",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
    courier_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üöö –ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)
    
    await message.answer(
        "üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤–∞–º –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞.",
        reply_markup=courier_kb,
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
    bot = message.bot
    for admin_id in ADMIN_CHAT_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"üÜï <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫—É—Ä—å–µ—Ä!</b>\n\n"
                f"üë§ <b>–ò–º—è:</b> {courier_name}\n"
                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {courier_phone}\n"
                f"üÜî <b>ID:</b> {user_id}",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id} about new courier: {e}")


@router.message(Command("cancel"), StateFilter("*"))
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞", StateFilter("*"))
async def cmd_cancel(message: Message, state: FSMContext):
    """Handler for /cancel command to cancel current operation"""
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer(
            "‚ùå –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # Restore appropriate keyboard based on user role
        user_id = message.from_user.id
        role = await get_user_role(user_id)
        
        if role == ROLE_SHOP:
            shop_kb = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑"), KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
                [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
            ], resize_keyboard=True)
            await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞", reply_markup=shop_kb)
        elif role == ROLE_ADMIN:
            admin_kb = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"), KeyboardButton(text="üìÆ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–∫–∞–∑")],
                [KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"), KeyboardButton(text="üìä –û—Ç—á–µ—Ç")],
                [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
            ], resize_keyboard=True)
            await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_kb)
        elif role == ROLE_COURIER:
            courier_kb = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="üöö –ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏")],
                [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
            ], resize_keyboard=True)
            await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—É—Ä—å–µ—Ä–∞", reply_markup=courier_kb)
    else:
        await message.answer("‚ùï –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º
@router.message(Command('whitelist_add'))
async def cmd_whitelist_add(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in ADMIN_CHAT_IDS:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/whitelist_add USER_ID</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        target_user_id = int(args[1].strip())
        success = await add_authorized_user(target_user_id)
        
        if success:
            await message.answer(
                f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.</b>",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.</b>",
                parse_mode="HTML"
            )
    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/whitelist_add USER_ID</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in whitelist_add command: {e}")
        await message.answer(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {str(e)}",
            parse_mode="HTML"
        )


@router.message(Command('whitelist_list'))
async def cmd_whitelist_list(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in ADMIN_CHAT_IDS:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        authorized_users_list = await get_authorized_users()
        
        if not authorized_users_list:
            await message.answer(
                "üìã <b>–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.</b>",
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_text = "\n".join([f"‚Ä¢ {user_id}" for user_id in authorized_users_list])
        
        await message.answer(
            f"üìã <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ:</b>\n\n{users_text}",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in whitelist_list command: {e}")
        await message.answer(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {str(e)}",
            parse_mode="HTML"
        )


@router.message(Command('whitelist_remove'))
async def cmd_whitelist_remove(message: Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in ADMIN_CHAT_IDS:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/whitelist_remove USER_ID</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        target_user_id = int(args[1].strip())
        
        # –ù–µ –¥–∞–µ–º —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
        if target_user_id in ADMIN_CHAT_IDS:
            await message.answer(
                "‚õî <b>–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞.</b>",
                parse_mode="HTML"
            )
            return
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
        from storage.database import remove_authorized_user
        success = await remove_authorized_user(target_user_id)
        
        if success:
            await message.answer(
                f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞.</b>",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                f"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.</b>",
                parse_mode="HTML"
            )
    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/whitelist_remove USER_ID</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in whitelist_remove command: {e}")
        await message.answer(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {str(e)}",
            parse_mode="HTML"
        )


@router.message(Command('export_orders'))
async def cmd_export_orders(message: Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ Excel —Ñ–∞–π–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in ADMIN_CHAT_IDS:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from storage.database import get_all_orders, export_orders_to_excel
        orders = await get_all_orders()
        
        if not orders:
            await message.answer(
                "üìä <b>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞</b>",
                parse_mode="HTML"
            )
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
        await message.answer(
            "‚è≥ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...</b>",
            parse_mode="HTML"
        )
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –≤ Excel
        filepath = await export_orders_to_excel(orders)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.bot.send_document(
            chat_id=message.chat.id,
            document=types.FSInputFile(filepath),
            caption="üìä <b>–û—Ç—á–µ—Ç –æ –∑–∞–∫–∞–∑–∞—Ö</b>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in export_orders command: {e}")
        await message.answer(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–∫–∞–∑–æ–≤:</b> {str(e)}",
            parse_mode="HTML"
        )


@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def cmd_user_management(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in ADMIN_CHAT_IDS:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    user_management_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"), KeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)
    
    await message.answer(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=user_management_kb,
        parse_mode="HTML"
    )


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def cmd_back_to_main_menu_admin(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    user_id = message.from_user.id
    role = await get_user_role(user_id)
    
    if role == ROLE_ADMIN:
        admin_kb = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"), KeyboardButton(text="üìÆ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"), KeyboardButton(text="üìä –û—Ç—á–µ—Ç")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ], resize_keyboard=True)
        
        await message.answer(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=admin_kb
        )


@router.message(F.text == "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")
async def cmd_view_whitelist(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    await cmd_whitelist_list(message)


@router.message(F.text == "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")
async def cmd_add_to_whitelist_start(message: Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"""
    user_id = message.from_user.id
    
    if user_id not in ADMIN_CHAT_IDS:
        await message.answer("‚õî –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    await message.answer(
        "‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ <b>üîô –ù–∞–∑–∞–¥</b>",
        parse_mode="HTML"
    )


@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞")
async def cmd_remove_from_whitelist_start(message: Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    user_id = message.from_user.id
    
    if user_id not in ADMIN_CHAT_IDS:
        await message.answer("‚õî –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    await message.answer(
        "‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ <b>üîô –ù–∞–∑–∞–¥</b>",
        parse_mode="HTML"
    )


def register_handlers(dp: Router):
    """Register all common handlers"""
    dp.include_router(router)
